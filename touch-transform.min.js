(function(){var TouchTransform=function(){var ongoingTouches=[];var lastTouches=[];var lastMouse=null;var mousePos=null;var mouseRot=0;var mouseScale=1;var attachedElements=[];var currentElement;var lastState={};var isTouch=false;defaultRotateKey="Shift";defaultScaleKey=false;var scrollMode="";function handleTouchStart(evt){var touches=evt.changedTouches;for(var i=0;i<touches.length;i++){ongoingTouches.push(copyTouch(touches[i]))}if(ongoingTouches.length==2&&!currentElement){var point=getMedianPoint();var element=document.elementFromPoint(point.clientX,point.clientY);startMultiTouchTransform(element)}}function handleMouseDown(evt){var point=evt;lastMouse=evt;mousePos={clientX:evt.clientX,clientY:evt.clientY};if(!currentElement){var element=document.elementFromPoint(point.clientX,point.clientY);startMouseTransform(element)}}function handleMouseUp(evt){endTransform()}function handleMouseMove(evt){lastMouse=mousePos;mousePos={clientX:evt.clientX,clientY:evt.clientY}}function handleKeyDown(evt){if(!currentElement)return;if(evt.key==currentElement.__touchTransformOptions.rotateKey){scrollMode="rotate"}else if(evt.key==currentElement.__touchTransformOptions.scaleKey){scrollMode="scale"}else{scrollMode=getDefaultScrollMode()}}function handleKeyUp(evt){if(!currentElement)return;if(evt.key==currentElement.__touchTransformOptions.rotateKey){scrollMode=""}if(evt.key==currentElement.__touchTransformOptions.scaleKey){scrollMode=""}if(!scrollMode){scrollMode=getDefaultScrollMode()}}function getDefaultScrollMode(){if(currentElement){if(currentElement.__touchTransformOptions.scaleKey===false)return"scale";if(currentElement.__touchTransformOptions.rotateKey===false)return"rotate"}return""}function handleWheel(evt){if(!currentElement){return}evt.preventDefault();evt.stopPropagation();if(scrollMode=="rotate"){mouseRot+=Math.sign(evt.deltaY)}if(scrollMode=="scale"){mouseScale+=Math.sign(evt.deltaY)*.01}}function handleTouchMove(evt){var touches=evt.changedTouches;for(var i=0;i<touches.length;i++){var idx=ongoingTouchIndexById(touches[i].identifier);if(idx>=0){ongoingTouches.splice(idx,1,copyTouch(touches[i]))}else{}}}function handleTouchEnd(evt){var touches=evt.changedTouches;for(var i=0;i<touches.length;i++){var idx=ongoingTouchIndexById(touches[i].identifier);if(idx>=0){ongoingTouches.splice(idx,1)}}if(ongoingTouches.length<2)endTransform()}function handleTouchCancel(evt){handleTouchEnd(evt)}function copyTouch({identifier:identifier,clientX:clientX,clientY:clientY}){return{identifier:identifier,clientX:clientX,clientY:clientY}}function ongoingTouchIndexById(idToFind){for(var i=0;i<ongoingTouches.length;i++){var id=ongoingTouches[i].identifier;if(id==idToFind){return i}}return-1}function startMouseTransform(element){isTouch=false;while(element){if(attachedElements.indexOf(element)>-1){break}element=element.parentElement}if(!element)return;var target=element.__touchTransformOptions.target;if(!target.__touchTransformInfo){resetTransformInfo(target)}lastState=getMouseTransformState();currentElement=element;if(!scrollMode)scrollMode=getDefaultScrollMode()}function startMultiTouchTransform(element){isTouch=true;while(element){if(attachedElements.indexOf(element)>-1){break}element=element.parentElement}if(!element)return;lastTouches=JSON.parse(JSON.stringify(ongoingTouches));var target=element.__touchTransformOptions.target;if(!target.__touchTransformInfo){resetTransformInfo(target)}lastState=getTouchTransformState();currentElement=element}function updateTransforms(){requestAnimationFrame(updateTransforms);if(!currentElement)return;try{var opt=currentElement.__touchTransformOptions;var state=isTouch?getTouchTransformState():getMouseTransformState();if(!currentElement){return}applyCSSTransform(opt.target,state);if(opt.onUpdate)opt.onUpdate(buildCSSTransform(opt.target.__touchTransformInfo),opt.target.__touchTransformInfo);lastState=state;lastTouches=JSON.parse(JSON.stringify(ongoingTouches))}catch(e){console.log(e)}}function applyCSSTransform(target,state){var targetInfo=target.__touchTransformInfo;var pos={x:targetInfo.translation.x+state.pos.clientX-lastState.pos.clientX,y:targetInfo.translation.y+state.pos.clientY-lastState.pos.clientY};var rotation=targetInfo.rotation+state.rot-lastState.rot;var scale=targetInfo.scale*(state.dist/lastState.dist);target.__touchTransformInfo={translation:pos,rotation:rotation,scale:scale};target.style.transform=buildCSSTransform(target.__touchTransformInfo)}function buildCSSTransform(transform){return`translate(${transform.translation.x}px,${transform.translation.y}px) rotate(${transform.rotation}deg) scale(${transform.scale})`}function getMouseTransformState(){return{rot:mouseRot,pos:mousePos,dist:mouseScale}}function getTouchTransformState(){return{rot:getTouchRotation(),dist:getTouchMedianDistance(),pos:getMedianPoint()}}function endTransform(){isTouch=false;currentElement=null;lastTouches=[]}function getDistance(x1,y1,x2,y2){var a=x1-x2;var b=y1-y2;return Math.hypot(a,b)}function getTouchMedianDistance(){var middle=getMedianPoint();var dist=0;ongoingTouches.forEach(touch=>{dist+=getDistance(middle.clientX,middle.clientY,touch.clientX,touch.clientY)});return dist/ongoingTouches.length}function getTouchRotation(){var lastTouch=lastTouches[0];var touch=ongoingTouches[ongoingTouchIndexById(lastTouch.identifier)];if(!touch)endTransform();var middle=getMedianPoint(ongoingTouches);return findAngle(lastTouch,middle,touch)}function findAngle(a,b){var c={clientX:b.clientX+1,clientY:b.clientY};var atanA=Math.atan2(a.clientX-b.clientX,a.clientY-b.clientY);var atanC=Math.atan2(c.clientX-b.clientX,c.clientY-b.clientY);var diff=atanC-atanA;diff*=180/Math.PI;return diff}function getMedianPoint(touchList){touchList=touchList||ongoingTouches;var x=0;var y=0;touchList.forEach(touch=>{x+=touch.clientX;y+=touch.clientY});x=x/touchList.length;y=y/touchList.length;return{clientX:x,clientY:y}}function resetTransformInfo(target){if(!target.__touchTransformOrigin){target.__touchTransformOrigin=parseTransform(target.style.transform,{translation:{x:0,y:0},rotation:0,scale:1})}target.__touchTransformInfo=target.__touchTransformOrigin;target.style=buildCSSTransform(target.__touchTransformOrigin)}function parseTransform(transformStr,defaults){var parsed=JSON.parse(JSON.stringify(defaults));var reg=/(translate|rotate|scale)\(([^)]+)\)/gi;var arr=[...transformStr.matchAll(reg)];arr.forEach(transform=>{var op=transform[1];var val=transform[2];if(op=="translate"){var xy=val.split(",");val={x:parseFloat(xy[0]),y:parseFloat(xy[1])}}else{val=parseFloat(val)}parsed[op]=val});return parsed}function getDummyElement(){return{style:{transform:""}}}window.addEventListener("touchstart",handleTouchStart,false);window.addEventListener("touchmove",handleTouchMove,false);window.addEventListener("touchend",handleTouchEnd,false);window.addEventListener("touchcancel",handleTouchCancel,false);window.addEventListener("mousedown",handleMouseDown,false);window.addEventListener("mouseup",handleMouseUp,false);window.addEventListener("mousemove",handleMouseMove,false);window.addEventListener("keydown",handleKeyDown,false);window.addEventListener("keyup",handleKeyUp,false);window.addEventListener("wheel",handleWheel,{passive:false});requestAnimationFrame(updateTransforms);return{attach:function attach(element,options){attachedElements.push(element);options=options||{};options.target=options.target===undefined?element:options.target;options.target=options.target===false?getDummyElement():options.target;if(options.rotateKey===undefined){options.rotateKey=defaultRotateKey}if(options.scaleKey===undefined){options.scaleKey=defaultScaleKey}element.__touchTransformOptions=options},reset:function reset(element){var target=element.__touchTransformOptions.target;resetTransformInfo(target)}}}();if(typeof module==="object"&&module&&typeof module.exports==="object"){module.exports=TouchTransform}else{if(typeof define==="function"&&define.amd){define("touch-transform",[],function(){return TouchTransform})}window.TouchTransform=TouchTransform}})();